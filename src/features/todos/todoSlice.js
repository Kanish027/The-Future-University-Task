// Importing createSlice from Redux Toolkit to create a slice for todo operations
import { createSlice } from "@reduxjs/toolkit";

// Initial state of the todo slice, attempting to read from local storage or defaulting to an empty array
const initialState = {
  todos: JSON.parse(localStorage.getItem("todos")) || [],
};

// Creating a slice for todo operations with name 'todos', initial state, and reducers for handling actions
export const todoSlice = createSlice({
  name: "todos", // Name of this slice used in action types
  initialState, // The initial state for the slice
  reducers: {
    // Reducer for adding a new todo item
    addTodo: (state, action) => {
      // Creating a new todo item with unique ID and data from action payload
      const newTodo = {
        id: Date.now(), // Unique identifier for each todo
        title: action.payload.title, // Title of the todo item
        description: action.payload.description, // Description of the todo item
        date: Date.now(), // Timestamp for when the todo was added
        completed: false, // Initial state of completion is false
      };
      // Adding the new todo item to the current state
      state.todos.push(newTodo);
    },

    // Reducer for deleting an existing todo item
    deleteTodo: (state, action) => {
      // Filtering out the todo item that matches the payload id
      state.todos = state.todos.filter((todo) => todo.id !== action.payload);
    },

    // Reducer for toggling the completion status of a todo item
    updateToggleTodo: (state, action) => {
      // Finding the index of the todo item to be toggled
      const index = state.todos.findIndex((todo) => todo.id === action.payload);
      // Check if the todo item exists
      if (index !== -1) {
        // Toggling the completion status of the todo item
        state.todos[index].completed = !state.todos[index].completed;
      }
    },
  },
});

// Exporting the actions generated by createSlice for use in components
export const { addTodo, deleteTodo, updateToggleTodo } = todoSlice.actions;

// Exporting the reducer for incorporation into the store
export default todoSlice.reducer;
